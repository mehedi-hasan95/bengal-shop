// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum userRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          userRole        @default(USER)
  accounts      Account[]
  ratings       Ratings[]
  addToCart     AddToCart[]
  addToWishList AddToWishList[]
  order         Order[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model HeroCarousel {
  id        String   @id @default(cuid())
  save      String
  title     String
  desc      String
  link      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String     @id @default(cuid())
  title     String     @unique
  url       String     @unique
  image     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Products[]
}

model Brand {
  id        String     @id @default(cuid())
  title     String     @unique
  url       String     @unique
  image     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Products[]
}

enum Offer {
  BUY_ONE_GET_ONE
  SPECIAL_OFFERS
}

model Products {
  id            String          @id @default(cuid())
  title         String
  desc          String
  image         ProductImage[]
  basePrice     Int?
  price         Int
  quantity      Int
  sale          Int             @default(0)
  offer         Offer?
  ratings       Ratings[]
  addToCart     AddToCart[]
  categoryId    String
  brandId       String
  category      Category        @relation(fields: [categoryId], references: [url], onDelete: Cascade)
  brand         Brand           @relation(fields: [brandId], references: [url], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addToWishList AddToWishList[]
  order         Order[]

  @@index([categoryId])
  @@index([brandId])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Ratings {
  id        String   @id @default(uuid())
  ratings   Int
  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model AddToCart {
  id        String   @id @default(uuid())
  title     String
  image     String
  quantity  Int
  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer     Offer?
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model AddToWishList {
  id        String   @id @default(uuid())
  title     String
  image     String
  productId String
  price     Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer     Offer?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

enum OrderStatus {
  IN_PROGRESS
  ON_THE_WAY
  DELIVERED
}

model Order {
  id        String      @id @default(uuid())
  title     String
  img       String?
  cartId    String      @unique
  quantity  Int
  productId String
  userId    String
  offer     Offer?
  price     Int
  paymentId String?
  expires   DateTime
  paid      Boolean     @default(false)
  product   Products    @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    OrderStatus @default(IN_PROGRESS)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([productId])
  @@index([userId])
}
